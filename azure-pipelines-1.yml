# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
    include:
    - main

pool:
  vmImage: 'windows-latest'
variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'


stages:
- stage: API
  jobs: 
    - job: BuildWebApp
      variables:
        solution: '**/*.sln'
        buildPlatform: 'Any CPU'
        buildConfiguration: 'Release'

      pool:
        vmImage: 'windows-latest'

        steps:
        - task: SonarCloudPrepare@1
          inputs:
            SonarCloud: 'P2_SonarCloudToken'
            organization: 'p2project-1'
            scannerMode: 'MSBuild'
            projectKey: 'P2Project_P2'
            projectName: 'P2'

        - task: DotNetCoreCLI@2
          displayName: building project
          inputs:
            command: 'build'
            projects: '$(solution)'
            arguments: '--configuration $(buildConfiguration)'

        - task: DotNetCoreCLI@2
          inputs:
            command: 'test'
            projects: '$(solution)'
            testRunTitle: 'dotnet tests running'
            arguments: '--configuration $(buildConfiguration) --collect "Code Coverage"'
            workingDirectory: 'P2Project/P2Main/P2Api/'
          

        - task: PublishCodeCoverageResults@1
          inputs:
            codeCoverageTool: 'Cobertura'
            summaryFileLocation: '**/coburtura/coverage.xml'

        #- task: SonarCloudAnalyze@1
        
        - task: SonarCloudPublish@1
          inputs:
            pollingTimeoutSec: '300'
        
        - task: PublishBuildArtifacts@1
            
- stage: Deploy
  dependsOn: API
  jobs:
    - job: DeployWebApp
      steps:
        - task: DotNetCoreCLI@2
          inputs:
            command: 'publish'
            publishWebProjects: false
            projects: '$(solution)'
            zipAfterPublish: true
        
        - task: AzureRmWebAppDeployment@4
          inputs:
            ConnectionType: 'AzureRM'
            azureSubscription: 'P2(6b99bb29-57fd-4673-b918-0d515335b837)'
            appType: 'webApp'
            WebAppName: 'PokeLoot'
            deployToSlotOrASE: true
            ResourceGroupName: 'PokeLoot'
            SlotName: 'production'
            packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'

- stage: DeployAngular
  jobs:
  - job:
    steps:    
    - task: NodeTool@0
      inputs:
        versionSpec: '14.x'
      displayName: 'Install Node.js'

    - script: |
        cd '$(System.DefaultWorkingDirectory)/P2Angular'
        npm install -g @angular/cli
        npm install
        ng build
    - task: AzureRmWebAppDeployment@4
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'P2(6b99bb29-57fd-4673-b918-0d515335b837)'
        appType: 'webApp'
        WebAppName: 'PokeLoot'
        packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'



# - script: dotnet build --configuration $(buildConfiguration)
#   displayName: 'dotnet build $(buildConfiguration)'
